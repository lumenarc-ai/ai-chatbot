"use client";

import { createContext, useContext, useState, ReactNode } from "react";
import { VisualizationType } from "@/components/demo-graph-tab";

// Define the shape of the demo graph data
export interface DemoGraphData {
  title?: string;
  description?: string;
  data?: any;
  visualizationType?: VisualizationType;
  toolName?: string; // Store which tool generated this data
  timestamp?: number; // When the data was generated
}

// Sample data for when no data is provided
export const SAMPLE_GRAPH_DATA: DemoGraphData = {
  title: "Sample Graph",
  description: "This is a sample graph visualization",
  visualizationType: "graph",
  data: {
    nodes: [
      { id: "A", label: "Node A" },
      { id: "B", label: "Node B" },
      { id: "C", label: "Node C" },
    ],
    edges: [
      { from: "A", to: "B" },
      { from: "B", to: "C" },
      { from: "C", to: "A" },
    ],
  },
  toolName: "sample",
  timestamp: Date.now(),
};

// Create context for the demo graph data
interface DemoGraphContextType {
  graphData: DemoGraphData;
  setGraphData: (
    data: DemoGraphData | ((prevData: DemoGraphData) => DemoGraphData)
  ) => void;
  updateGraphData: (toolName: string, data: any) => void;
}

const DemoGraphContext = createContext<DemoGraphContextType | undefined>(
  undefined
);

// Provider component
export function DemoGraphProvider({ children }: { children: ReactNode }) {
  const [graphData, setGraphData] = useState<DemoGraphData>(SAMPLE_GRAPH_DATA);

  // Function to update graph data from tool calls
  const updateGraphData = (toolName: string, data: any) => {
    setGraphData({
      title: data.title || `${toolName} Result`,
      description:
        data.description ||
        `Generated by ${toolName} at ${new Date().toLocaleString()}`,
      data: data.data || data, // Handle both structured and raw data
      visualizationType: data.visualizationType || "json", // Default to JSON view
      toolName,
      timestamp: Date.now(),
    });
  };

  return (
    <DemoGraphContext.Provider
      value={{ graphData, setGraphData, updateGraphData }}
    >
      {children}
    </DemoGraphContext.Provider>
  );
}

// Hook to use the demo graph data
export function useDemoGraphData() {
  const context = useContext(DemoGraphContext);
  if (context === undefined) {
    throw new Error("useDemoGraphData must be used within a DemoGraphProvider");
  }

  return context;
}
